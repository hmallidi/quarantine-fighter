{"ast":null,"code":"import React, { Component } from \"react\";\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { lighten, makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport FilterListIcon from '@material-ui/icons/FilterList';\n\nclass Healthcare extends Component {\n  constructor(props) {}\n  /*\n  function createData(name, address, phone_number, website, hours) {\n    return {name, address, phone_number, website, hours};\n  }\n   const rows = [\n  createData('hospital', 'address', '1234567890', 'website.com', '12AM - 11PM'), \n  createData('hospital', 'address', '1234567890', 'website.com', '12AM - 11PM')\n  ];\n   function descendingComparator(a, b, orderBy) {\n   if(b[orderBy] < a[orderBy]) {\n    return -1;\n   }\n   if(b[orderBy] > a[orderBy]) {\n    return 1;\n   }\n   return 0; \n  }\n   function getComparator(order, orderBy) {\n   return order == 'desc' ? (a, b) => descendingComparator(a, b, orderBy) : (a, b) => -descendingComparator(a, b, orderBy);\n  }\n   function stableSort(array, comparator) {\n   const stabilizedThis = array.map((el, index) => [el, index]);\n   stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0]);\n    if (order !== 0) return order;\n    return a[1] - b[1];\n   });\n   return stabilizedThis.map((el) => el[0]);\n  }\n   const headCells = [\n   \n  ];\n   function EnhancedTableHead(props) {\n  const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\n  const createSortHandler = (property) => (event) => {\n   onRequestSort(event, property);\n  };\n  \n  return (\n   <TableHead>\n  <TableRow>\n    <TableCell padding=\"checkbox\">\n  \t<Checkbox\n  \t  indeterminate={numSelected > 0 && numSelected < rowCount}\n  \t  checked={rowCount > 0 && numSelected === rowCount}\n  \t  onChange={onSelectAllClick}\n  \t  inputProps={{ 'aria-label': 'select all desserts' }}\n  \t/>\n    </TableCell>\n    {headCells.map((headCell) => (\n  \t<TableCell\n  \t  key={headCell.id}\n  \t  align={headCell.numeric ? 'right' : 'left'}\n  \t  padding={headCell.disablePadding ? 'none' : 'default'}\n  \t  sortDirection={orderBy === headCell.id ? order : false}\n  \t>\n  \t  <TableSortLabel\n  \t\tactive={orderBy === headCell.id}\n  \t\tdirection={orderBy === headCell.id ? order : 'asc'}\n  \t\tonClick={createSortHandler(headCell.id)}\n  \t  >\n  \t\t{headCell.label}\n  \t\t{orderBy === headCell.id ? (\n  \t\t  <span className={classes.visuallyHidden}>\n  \t\t\t{order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n  \t\t  </span>\n  \t\t) : null}\n  \t  </TableSortLabel>\n  \t</TableCell>\n    ))}\n  </TableRow>\n   </TableHead>\n  );\n  }\n  \n  EnhancedTableHead.propTypes = {\n  classes: PropTypes.object.isRequired,\n  numSelected: PropTypes.number.isRequired,\n  onRequestSort: PropTypes.func.isRequired,\n  onSelectAllClick: PropTypes.func.isRequired,\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n  orderBy: PropTypes.string.isRequired,\n  rowCount: PropTypes.number.isRequired,\n  };\n  \n  const useToolbarStyles = makeStyles((theme) => ({\n  root: {\n   paddingLeft: theme.spacing(2),\n   paddingRight: theme.spacing(1),\n  },\n  highlight:\n   theme.palette.type === 'light'\n  ? {\n  \tcolor: theme.palette.secondary.main,\n  \tbackgroundColor: lighten(theme.palette.secondary.light, 0.85),\n    }\n  : {\n  \tcolor: theme.palette.text.primary,\n  \tbackgroundColor: theme.palette.secondary.dark,\n    },\n  title: {\n   flex: '1 1 100%',\n  },\n  }));\n  \n  const EnhancedTableToolbar = (props) => {\n  const classes = useToolbarStyles();\n  const { numSelected } = props;\n  \n  return (\n   <Toolbar\n  className={clsx(classes.root, {\n    [classes.highlight]: numSelected > 0,\n  })}\n   >\n  {numSelected > 0 ? (\n    <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\" component=\"div\">\n  \t{numSelected} selected\n    </Typography>\n  ) : (\n    <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\n  \tNutrition\n    </Typography>\n  )}\n  \n  {numSelected > 0 ? (\n    <Tooltip title=\"Delete\">\n  \t<IconButton aria-label=\"delete\">\n  \t  <DeleteIcon />\n  \t</IconButton>\n    </Tooltip>\n  ) : (\n    <Tooltip title=\"Filter list\">\n  \t<IconButton aria-label=\"filter list\">\n  \t  <FilterListIcon />\n  \t</IconButton>\n    </Tooltip>\n  )}\n   </Toolbar>\n  );\n  };\n  \n  EnhancedTableToolbar.propTypes = {\n  numSelected: PropTypes.number.isRequired,\n  };\n  \n  const useStyles = makeStyles((theme) => ({\n  root: {\n   width: '100%',\n  },\n  paper: {\n   width: '100%',\n   marginBottom: theme.spacing(2),\n  },\n  table: {\n   minWidth: 750,\n  },\n  visuallyHidden: {\n   border: 0,\n   clip: 'rect(0 0 0 0)',\n   height: 1,\n   margin: -1,\n   overflow: 'hidden',\n   padding: 0,\n   position: 'absolute',\n   top: 20,\n   width: 1,\n  },\n  }));  \n   function EnhancedTableHead(props) {\n    const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\n    const createSortHandler = (property) => (event) => {\n      onRequestSort(event, property);\n    };\n  \n    return (\n      <TableHead>\n        <TableRow>\n          <TableCell padding=\"checkbox\">\n            <Checkbox\n              indeterminate={numSelected > 0 && numSelected < rowCount}\n              checked={rowCount > 0 && numSelected === rowCount}\n              onChange={onSelectAllClick}\n              inputProps={{ 'aria-label': 'select all desserts' }}\n            />\n          </TableCell>\n          {headCells.map((headCell) => (\n            <TableCell\n              key={headCell.id}\n              align={headCell.numeric ? 'right' : 'left'}\n              padding={headCell.disablePadding ? 'none' : 'default'}\n              sortDirection={orderBy === headCell.id ? order : false}\n            >\n              <TableSortLabel\n                active={orderBy === headCell.id}\n                direction={orderBy === headCell.id ? order : 'asc'}\n                onClick={createSortHandler(headCell.id)}\n              >\n                {headCell.label}\n                {orderBy === headCell.id ? (\n                  <span className={classes.visuallyHidden}>\n                    {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                  </span>\n                ) : null}\n              </TableSortLabel>\n            </TableCell>\n          ))}\n        </TableRow>\n      </TableHead>\n    );\n  }\n  \n  EnhancedTableHead.propTypes = {\n    classes: PropTypes.object.isRequired,\n    numSelected: PropTypes.number.isRequired,\n    onRequestSort: PropTypes.func.isRequired,\n    onSelectAllClick: PropTypes.func.isRequired,\n    order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n    orderBy: PropTypes.string.isRequired,\n    rowCount: PropTypes.number.isRequired,\n  };\n  \n  const useToolbarStyles = makeStyles((theme) => ({\n    root: {\n      paddingLeft: theme.spacing(2),\n      paddingRight: theme.spacing(1),\n    },\n    highlight:\n      theme.palette.type === 'light'\n        ? {\n            color: theme.palette.secondary.main,\n            backgroundColor: lighten(theme.palette.secondary.light, 0.85),\n          }\n        : {\n            color: theme.palette.text.primary,\n            backgroundColor: theme.palette.secondary.dark,\n          },\n    title: {\n      flex: '1 1 100%',\n    },\n  }));\n  \n  const EnhancedTableToolbar = (props) => {\n    const classes = useToolbarStyles();\n    const { numSelected } = props;\n  \n    return (\n      <Toolbar\n        className={clsx(classes.root, {\n          [classes.highlight]: numSelected > 0,\n        })}\n      >\n        {numSelected > 0 ? (\n          <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\" component=\"div\">\n            {numSelected} selected\n          </Typography>\n        ) : (\n          <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\n            Nutrition\n          </Typography>\n        )}\n  \n        {numSelected > 0 ? (\n          <Tooltip title=\"Delete\">\n            <IconButton aria-label=\"delete\">\n              <DeleteIcon />\n            </IconButton>\n          </Tooltip>\n        ) : (\n          <Tooltip title=\"Filter list\">\n            <IconButton aria-label=\"filter list\">\n              <FilterListIcon />\n            </IconButton>\n          </Tooltip>\n        )}\n      </Toolbar>\n    );\n  };\n  \n  EnhancedTableToolbar.propTypes = {\n    numSelected: PropTypes.number.isRequired,\n  };\n  \n  const useStyles = makeStyles((theme) => ({\n    root: {\n      width: '100%',\n    },\n    paper: {\n      width: '100%',\n      marginBottom: theme.spacing(2),\n    },\n    table: {\n      minWidth: 750,\n    },\n    visuallyHidden: {\n      border: 0,\n      clip: 'rect(0 0 0 0)',\n      height: 1,\n      margin: -1,\n      overflow: 'hidden',\n      padding: 0,\n      position: 'absolute',\n      top: 20,\n      width: 1,\n    },\n  }));  \n   export default function EnhancedTable() {\n    const classes = useStyles();\n    const [order, setOrder] = React.useState('asc');\n    const [orderBy, setOrderBy] = React.useState('calories');\n    const [selected, setSelected] = React.useState([]);\n    const [page, setPage] = React.useState(0);\n    const [dense, setDense] = React.useState(false);\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\n     const handleRequestSort = (event, property) => {\n      const isAsc = orderBy === property && order === 'asc';\n      setOrder(isAsc ? 'desc' : 'asc');\n      setOrderBy(property);\n    };\n     const handleSelectAllClick = (event) => {\n      if (event.target.checked) {\n        const newSelecteds = rows.map((n) => n.name);\n        setSelected(newSelecteds);\n        return;\n      }\n      setSelected([]);\n    };\n     const handleClick = (event, name) => {\n      const selectedIndex = selected.indexOf(name);\n      let newSelected = [];\n       if (selectedIndex === -1) {\n        newSelected = newSelected.concat(selected, name);\n      } else if (selectedIndex === 0) {\n        newSelected = newSelected.concat(selected.slice(1));\n      } else if (selectedIndex === selected.length - 1) {\n        newSelected = newSelected.concat(selected.slice(0, -1));\n      } else if (selectedIndex > 0) {\n        newSelected = newSelected.concat(\n          selected.slice(0, selectedIndex),\n          selected.slice(selectedIndex + 1),\n        );\n      }\n       setSelected(newSelected);\n    };\n     const handleChangePage = (event, newPage) => {\n      setPage(newPage);\n    };\n     const handleChangeRowsPerPage = (event) => {\n      setRowsPerPage(parseInt(event.target.value, 10));\n      setPage(0);\n    };\n     const handleChangeDense = (event) => {\n      setDense(event.target.checked);\n    };\n     const isSelected = (name) => selected.indexOf(name) !== -1;\n     const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\n     return (\n      <div className={classes.root}>\n        <Paper className={classes.paper}>\n          <EnhancedTableToolbar numSelected={selected.length} />\n          <TableContainer>\n            <Table\n              className={classes.table}\n              aria-labelledby=\"tableTitle\"\n              size={dense ? 'small' : 'medium'}\n              aria-label=\"enhanced table\"\n            >\n              <EnhancedTableHead\n                classes={classes}\n                numSelected={selected.length}\n                order={order}\n                orderBy={orderBy}\n                onSelectAllClick={handleSelectAllClick}\n                onRequestSort={handleRequestSort}\n                rowCount={rows.length}\n              />\n              <TableBody>\n                {stableSort(rows, getComparator(order, orderBy))\n                  .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                  .map((row, index) => {\n                    const isItemSelected = isSelected(row.name);\n                    const labelId = `enhanced-table-checkbox-${index}`;\n                     return (\n                      <TableRow\n                        hover\n                        onClick={(event) => handleClick(event, row.name)}\n                        role=\"checkbox\"\n                        aria-checked={isItemSelected}\n                        tabIndex={-1}\n                        key={row.name}\n                        selected={isItemSelected}\n                      >\n                        <TableCell padding=\"checkbox\">\n                          <Checkbox\n                            checked={isItemSelected}\n                            inputProps={{ 'aria-labelledby': labelId }}\n                          />\n                        </TableCell>\n                        <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\n                          {row.name}\n                        </TableCell>\n                        <TableCell align=\"right\">{row.name}</TableCell>\n                        <TableCell align=\"right\">{row.address}</TableCell>\n                        <TableCell align=\"right\">{row.phone_number}</TableCell>\n                        <TableCell align=\"right\">{row.website}</TableCell>\n                        <TAbleCell align=\"right\">{row.hours}</TAbleCell>\n                      </TableRow>\n                    );\n                  })}\n                {emptyRows > 0 && (\n                  <TableRow style={{ height: (dense ? 33 : 53) * emptyRows }}>\n                    <TableCell colSpan={6} />\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          </TableContainer>\n          <TablePagination\n            rowsPerPageOptions={[5, 10, 25]}\n            component=\"div\"\n            count={rows.length}\n            rowsPerPage={rowsPerPage}\n            page={page}\n            onChangePage={handleChangePage}\n            onChangeRowsPerPage={handleChangeRowsPerPage}\n          />\n        </Paper>\n        <FormControlLabel\n          control={<Switch checked={dense} onChange={handleChangeDense} />}\n          label=\"Dense padding\"\n        />\n      </div>\n    );\n  }\n  */\n\n  /*\n  return(\n  \t<TableContainer component={Paper}>\n  \t\t<Table className={classes.table} aria-label=\"simple table\">\n  \t\t\t<TableHead>\n  \t\t\t\t<TableRow>\n  \t\t\t\t\t<TableCell>Name</TableCell>\n  \t\t\t\t\t<TableCell>Address</TableCell>\n  \t\t\t\t\t<TableCell>Phone Number</TableCell>\n  \t\t\t\t\t<TableCell>Website</TableCell>\n  \t\t\t\t\t<TableCell>Hours</TableCell>\n  \t\t\t\t</TableRow>\n  \t\t\t</TableHead>\n  \t\t\t<TableBody>\n  \t\t\t\t{rows.map((row) => (\n  \t\t\t\t\t<TableRow key={row.name}>\n  \t\t\t\t\t\t<Table Cell component=\"th\" scope=\"row\">\n  \t\t\t\t\t\t\t{row.name}\n  \t\t\t\t\t\t</Table>\n  \t\t\t\t\t\t<TableCell>{row.address}</TableCell>\n  \t\t\t\t\t\t<TableCell>{row.phone_number}</TableCell>\n  \t\t\t\t\t\t<TableCell>{row.website}</TableCell>\n  \t\t\t\t\t\t<TableCell>{row.hours}</TableCell>\n  \t\t\t\t\t</TableRow>\n  \t\t\t\t))}\n  \t\t\t</TableBody>\n  \t\t</Table>\n  \t</TableContainer>\n  );\n   }\n   */\n\n  /*\n   render() {\n     return (\n       <HashRouter>\n          <div>\n          <h1>COVID\tFIGHTER</h1>\n            <ul className=\"header\">\n              <li><NavLink exact to=\"/\">Home</NavLink></li>\n              <li><NavLink exact to=\"/Grocery\">Grocery</NavLink></li>\n              <li><NavLink exact to=\"/Restaurant\">Restaurant</NavLink></li>\n              <li><NavLink exact to=\"/Healthcare\">Healthcare</NavLink></li>\n              <li><NavLink exact to=\"/About\">About</NavLink></li>\n            </ul>\n            <div className=\"content\">\n  \t\t\t  <Route exact path=\"/\" component={Home}/>\n  \t\t\t  <Route path=\"/Grocery\" exact component={Grocery}/>\n  \t\t\t  <Route path=\"/Restaurant\" exact component={Restaurant}/>\n  \t\t\t  <Route path=\"/Healthcare\" exact component={Healthcare}/>\n  \t\t\t  <Route path=\"/About\" exact component={About}/>\n  \t\t\t</div>\n          </div>\n          \n       </HashRouter>\n  \t/*\n       <div>\n         <h2>HELLO</h2>\n         <p>Cras facilisis urna ornare ex volutpat, et\n         convallis erat elementum. Ut aliquam, ipsum vitae\n         gravida suscipit, metus dui bibendum est, eget rhoncus nibh\n         metus nec massa. Maecenas hendrerit laoreet augue\n         nec molestie. Cum sociis natoque penatibus et magnis\n         dis parturient montes, nascetur ridiculus mus.</p>\n  \n         <p>Duis a turpis sed lacus dapibus elementum sed eu lectus.</p>\n    </div>\n     );\n   }\n   */\n\n\n}\n/*\nclass GoogleMap extends Component {\n  googleMapRef = React.createRef()\n\n  componentDidMount() {\n    const googleMapScript = document.createElement('script')\n    googleScript.src = `https://maps.googleapis.com/maps/api/js?key=${GOOGLE_MAP_API_KEY}&libraries=places`\n    window.document.body.appendChild(googleScript)\n\n    googleScript.addEventListener('load', {\n      this.googleMap = this.createGoogleMap()\n      this.marker = this.createMarker()\n    })\n  }\n\n  createGoogleMap = () =>\n    new window.google.maps.Map(this.googleMapRef.current, {\n      zoom: 16,\n      center: {\n        lat: 43.642567,\n        lng: -79.387054,\n      },\n      disableDefaultUI: true,\n    })\n\n  createMarker = () =>\n    new window.google.maps.Marker({\n      position: { lat: 43.642567, lng: -79.387054 },\n      map: this.googleMap,\n    })\n\n  render() {\n    return (\n      <div\n        id=\"google-map\"\n        ref={this.googleMapRef}\n        style={{ width: '400px', height: '300px' }}\n      />\n    )\n  }\n}\n*/\n\n\nexport default Healthcare; //export default GoogleMap;","map":{"version":3,"sources":["/Users/angelacao/Desktop/covid-fighter/react_ver/src/Healthcare.js"],"names":["React","Component","PropTypes","clsx","lighten","makeStyles","Table","TableBody","TableCell","TableContainer","TableHead","TablePagination","TableRow","TableSortLabel","Toolbar","Typography","Paper","Checkbox","IconButton","Tooltip","FormControlLabel","Switch","DeleteIcon","FilterListIcon","Healthcare","constructor","props"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,SAASC,OAAT,EAAkBC,UAAlB,QAAoC,0BAApC;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,eAAP,MAA4B,mCAA5B;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,gBAAP,MAA6B,oCAA7B;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,UAAP,MAAuB,2BAAvB;AACA,OAAOC,cAAP,MAA2B,+BAA3B;;AAIA,MAAMC,UAAN,SAAyBvB,SAAzB,CAAmC;AAEjCwB,EAAAA,WAAW,CAAEC,KAAF,EAAS,CAEnB;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAucD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA3ekC;AAkhBnC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CA,eAAeF,UAAf,C,CACA","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { lighten, makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport FilterListIcon from '@material-ui/icons/FilterList';\n \n\n\nclass Healthcare extends Component {\n\n  constructor (props) {\n\n  }\n  /*\n  function createData(name, address, phone_number, website, hours) {\n    return {name, address, phone_number, website, hours};\n  }\n\n  const rows = [\n\tcreateData('hospital', 'address', '1234567890', 'website.com', '12AM - 11PM'), \n\tcreateData('hospital', 'address', '1234567890', 'website.com', '12AM - 11PM')\n  ];\n\n  function descendingComparator(a, b, orderBy) {\n\t  if(b[orderBy] < a[orderBy]) {\n\t\t  return -1;\n\t  }\n\t  if(b[orderBy] > a[orderBy]) {\n\t\t  return 1;\n\t  }\n\t  return 0; \n  }\n\n  function getComparator(order, orderBy) {\n\t  return order == 'desc' ? (a, b) => descendingComparator(a, b, orderBy) : (a, b) => -descendingComparator(a, b, orderBy);\n  }\n\n  function stableSort(array, comparator) {\n\t  const stabilizedThis = array.map((el, index) => [el, index]);\n\t  stabilizedThis.sort((a, b) => {\n\t\t  const order = comparator(a[0], b[0]);\n\t\t  if (order !== 0) return order;\n\t\t  return a[1] - b[1];\n\t  });\n\t  return stabilizedThis.map((el) => el[0]);\n  }\n\n  const headCells = [\n\t  \n  ];\n\n  function EnhancedTableHead(props) {\n\tconst { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\n\tconst createSortHandler = (property) => (event) => {\n\t  onRequestSort(event, property);\n\t};\n  \n\treturn (\n\t  <TableHead>\n\t\t<TableRow>\n\t\t  <TableCell padding=\"checkbox\">\n\t\t\t<Checkbox\n\t\t\t  indeterminate={numSelected > 0 && numSelected < rowCount}\n\t\t\t  checked={rowCount > 0 && numSelected === rowCount}\n\t\t\t  onChange={onSelectAllClick}\n\t\t\t  inputProps={{ 'aria-label': 'select all desserts' }}\n\t\t\t/>\n\t\t  </TableCell>\n\t\t  {headCells.map((headCell) => (\n\t\t\t<TableCell\n\t\t\t  key={headCell.id}\n\t\t\t  align={headCell.numeric ? 'right' : 'left'}\n\t\t\t  padding={headCell.disablePadding ? 'none' : 'default'}\n\t\t\t  sortDirection={orderBy === headCell.id ? order : false}\n\t\t\t>\n\t\t\t  <TableSortLabel\n\t\t\t\tactive={orderBy === headCell.id}\n\t\t\t\tdirection={orderBy === headCell.id ? order : 'asc'}\n\t\t\t\tonClick={createSortHandler(headCell.id)}\n\t\t\t  >\n\t\t\t\t{headCell.label}\n\t\t\t\t{orderBy === headCell.id ? (\n\t\t\t\t  <span className={classes.visuallyHidden}>\n\t\t\t\t\t{order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n\t\t\t\t  </span>\n\t\t\t\t) : null}\n\t\t\t  </TableSortLabel>\n\t\t\t</TableCell>\n\t\t  ))}\n\t\t</TableRow>\n\t  </TableHead>\n\t);\n  }\n  \n  EnhancedTableHead.propTypes = {\n\tclasses: PropTypes.object.isRequired,\n\tnumSelected: PropTypes.number.isRequired,\n\tonRequestSort: PropTypes.func.isRequired,\n\tonSelectAllClick: PropTypes.func.isRequired,\n\torder: PropTypes.oneOf(['asc', 'desc']).isRequired,\n\torderBy: PropTypes.string.isRequired,\n\trowCount: PropTypes.number.isRequired,\n  };\n  \n  const useToolbarStyles = makeStyles((theme) => ({\n\troot: {\n\t  paddingLeft: theme.spacing(2),\n\t  paddingRight: theme.spacing(1),\n\t},\n\thighlight:\n\t  theme.palette.type === 'light'\n\t\t? {\n\t\t\tcolor: theme.palette.secondary.main,\n\t\t\tbackgroundColor: lighten(theme.palette.secondary.light, 0.85),\n\t\t  }\n\t\t: {\n\t\t\tcolor: theme.palette.text.primary,\n\t\t\tbackgroundColor: theme.palette.secondary.dark,\n\t\t  },\n\ttitle: {\n\t  flex: '1 1 100%',\n\t},\n  }));\n  \n  const EnhancedTableToolbar = (props) => {\n\tconst classes = useToolbarStyles();\n\tconst { numSelected } = props;\n  \n\treturn (\n\t  <Toolbar\n\t\tclassName={clsx(classes.root, {\n\t\t  [classes.highlight]: numSelected > 0,\n\t\t})}\n\t  >\n\t\t{numSelected > 0 ? (\n\t\t  <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\" component=\"div\">\n\t\t\t{numSelected} selected\n\t\t  </Typography>\n\t\t) : (\n\t\t  <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\n\t\t\tNutrition\n\t\t  </Typography>\n\t\t)}\n  \n\t\t{numSelected > 0 ? (\n\t\t  <Tooltip title=\"Delete\">\n\t\t\t<IconButton aria-label=\"delete\">\n\t\t\t  <DeleteIcon />\n\t\t\t</IconButton>\n\t\t  </Tooltip>\n\t\t) : (\n\t\t  <Tooltip title=\"Filter list\">\n\t\t\t<IconButton aria-label=\"filter list\">\n\t\t\t  <FilterListIcon />\n\t\t\t</IconButton>\n\t\t  </Tooltip>\n\t\t)}\n\t  </Toolbar>\n\t);\n  };\n  \n  EnhancedTableToolbar.propTypes = {\n\tnumSelected: PropTypes.number.isRequired,\n  };\n  \n  const useStyles = makeStyles((theme) => ({\n\troot: {\n\t  width: '100%',\n\t},\n\tpaper: {\n\t  width: '100%',\n\t  marginBottom: theme.spacing(2),\n\t},\n\ttable: {\n\t  minWidth: 750,\n\t},\n\tvisuallyHidden: {\n\t  border: 0,\n\t  clip: 'rect(0 0 0 0)',\n\t  height: 1,\n\t  margin: -1,\n\t  overflow: 'hidden',\n\t  padding: 0,\n\t  position: 'absolute',\n\t  top: 20,\n\t  width: 1,\n\t},\n  }));  \n\n  function EnhancedTableHead(props) {\n    const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\n    const createSortHandler = (property) => (event) => {\n      onRequestSort(event, property);\n    };\n  \n    return (\n      <TableHead>\n        <TableRow>\n          <TableCell padding=\"checkbox\">\n            <Checkbox\n              indeterminate={numSelected > 0 && numSelected < rowCount}\n              checked={rowCount > 0 && numSelected === rowCount}\n              onChange={onSelectAllClick}\n              inputProps={{ 'aria-label': 'select all desserts' }}\n            />\n          </TableCell>\n          {headCells.map((headCell) => (\n            <TableCell\n              key={headCell.id}\n              align={headCell.numeric ? 'right' : 'left'}\n              padding={headCell.disablePadding ? 'none' : 'default'}\n              sortDirection={orderBy === headCell.id ? order : false}\n            >\n              <TableSortLabel\n                active={orderBy === headCell.id}\n                direction={orderBy === headCell.id ? order : 'asc'}\n                onClick={createSortHandler(headCell.id)}\n              >\n                {headCell.label}\n                {orderBy === headCell.id ? (\n                  <span className={classes.visuallyHidden}>\n                    {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                  </span>\n                ) : null}\n              </TableSortLabel>\n            </TableCell>\n          ))}\n        </TableRow>\n      </TableHead>\n    );\n  }\n  \n  EnhancedTableHead.propTypes = {\n    classes: PropTypes.object.isRequired,\n    numSelected: PropTypes.number.isRequired,\n    onRequestSort: PropTypes.func.isRequired,\n    onSelectAllClick: PropTypes.func.isRequired,\n    order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n    orderBy: PropTypes.string.isRequired,\n    rowCount: PropTypes.number.isRequired,\n  };\n  \n  const useToolbarStyles = makeStyles((theme) => ({\n    root: {\n      paddingLeft: theme.spacing(2),\n      paddingRight: theme.spacing(1),\n    },\n    highlight:\n      theme.palette.type === 'light'\n        ? {\n            color: theme.palette.secondary.main,\n            backgroundColor: lighten(theme.palette.secondary.light, 0.85),\n          }\n        : {\n            color: theme.palette.text.primary,\n            backgroundColor: theme.palette.secondary.dark,\n          },\n    title: {\n      flex: '1 1 100%',\n    },\n  }));\n  \n  const EnhancedTableToolbar = (props) => {\n    const classes = useToolbarStyles();\n    const { numSelected } = props;\n  \n    return (\n      <Toolbar\n        className={clsx(classes.root, {\n          [classes.highlight]: numSelected > 0,\n        })}\n      >\n        {numSelected > 0 ? (\n          <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\" component=\"div\">\n            {numSelected} selected\n          </Typography>\n        ) : (\n          <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\n            Nutrition\n          </Typography>\n        )}\n  \n        {numSelected > 0 ? (\n          <Tooltip title=\"Delete\">\n            <IconButton aria-label=\"delete\">\n              <DeleteIcon />\n            </IconButton>\n          </Tooltip>\n        ) : (\n          <Tooltip title=\"Filter list\">\n            <IconButton aria-label=\"filter list\">\n              <FilterListIcon />\n            </IconButton>\n          </Tooltip>\n        )}\n      </Toolbar>\n    );\n  };\n  \n  EnhancedTableToolbar.propTypes = {\n    numSelected: PropTypes.number.isRequired,\n  };\n  \n  const useStyles = makeStyles((theme) => ({\n    root: {\n      width: '100%',\n    },\n    paper: {\n      width: '100%',\n      marginBottom: theme.spacing(2),\n    },\n    table: {\n      minWidth: 750,\n    },\n    visuallyHidden: {\n      border: 0,\n      clip: 'rect(0 0 0 0)',\n      height: 1,\n      margin: -1,\n      overflow: 'hidden',\n      padding: 0,\n      position: 'absolute',\n      top: 20,\n      width: 1,\n    },\n  }));  \n\n  export default function EnhancedTable() {\n    const classes = useStyles();\n    const [order, setOrder] = React.useState('asc');\n    const [orderBy, setOrderBy] = React.useState('calories');\n    const [selected, setSelected] = React.useState([]);\n    const [page, setPage] = React.useState(0);\n    const [dense, setDense] = React.useState(false);\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\n\n    const handleRequestSort = (event, property) => {\n      const isAsc = orderBy === property && order === 'asc';\n      setOrder(isAsc ? 'desc' : 'asc');\n      setOrderBy(property);\n    };\n\n    const handleSelectAllClick = (event) => {\n      if (event.target.checked) {\n        const newSelecteds = rows.map((n) => n.name);\n        setSelected(newSelecteds);\n        return;\n      }\n      setSelected([]);\n    };\n\n    const handleClick = (event, name) => {\n      const selectedIndex = selected.indexOf(name);\n      let newSelected = [];\n\n      if (selectedIndex === -1) {\n        newSelected = newSelected.concat(selected, name);\n      } else if (selectedIndex === 0) {\n        newSelected = newSelected.concat(selected.slice(1));\n      } else if (selectedIndex === selected.length - 1) {\n        newSelected = newSelected.concat(selected.slice(0, -1));\n      } else if (selectedIndex > 0) {\n        newSelected = newSelected.concat(\n          selected.slice(0, selectedIndex),\n          selected.slice(selectedIndex + 1),\n        );\n      }\n\n      setSelected(newSelected);\n    };\n\n    const handleChangePage = (event, newPage) => {\n      setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n      setRowsPerPage(parseInt(event.target.value, 10));\n      setPage(0);\n    };\n\n    const handleChangeDense = (event) => {\n      setDense(event.target.checked);\n    };\n\n    const isSelected = (name) => selected.indexOf(name) !== -1;\n\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\n\n    return (\n      <div className={classes.root}>\n        <Paper className={classes.paper}>\n          <EnhancedTableToolbar numSelected={selected.length} />\n          <TableContainer>\n            <Table\n              className={classes.table}\n              aria-labelledby=\"tableTitle\"\n              size={dense ? 'small' : 'medium'}\n              aria-label=\"enhanced table\"\n            >\n              <EnhancedTableHead\n                classes={classes}\n                numSelected={selected.length}\n                order={order}\n                orderBy={orderBy}\n                onSelectAllClick={handleSelectAllClick}\n                onRequestSort={handleRequestSort}\n                rowCount={rows.length}\n              />\n              <TableBody>\n                {stableSort(rows, getComparator(order, orderBy))\n                  .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                  .map((row, index) => {\n                    const isItemSelected = isSelected(row.name);\n                    const labelId = `enhanced-table-checkbox-${index}`;\n\n                    return (\n                      <TableRow\n                        hover\n                        onClick={(event) => handleClick(event, row.name)}\n                        role=\"checkbox\"\n                        aria-checked={isItemSelected}\n                        tabIndex={-1}\n                        key={row.name}\n                        selected={isItemSelected}\n                      >\n                        <TableCell padding=\"checkbox\">\n                          <Checkbox\n                            checked={isItemSelected}\n                            inputProps={{ 'aria-labelledby': labelId }}\n                          />\n                        </TableCell>\n                        <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\n                          {row.name}\n                        </TableCell>\n                        <TableCell align=\"right\">{row.name}</TableCell>\n                        <TableCell align=\"right\">{row.address}</TableCell>\n                        <TableCell align=\"right\">{row.phone_number}</TableCell>\n                        <TableCell align=\"right\">{row.website}</TableCell>\n                        <TAbleCell align=\"right\">{row.hours}</TAbleCell>\n                      </TableRow>\n                    );\n                  })}\n                {emptyRows > 0 && (\n                  <TableRow style={{ height: (dense ? 33 : 53) * emptyRows }}>\n                    <TableCell colSpan={6} />\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          </TableContainer>\n          <TablePagination\n            rowsPerPageOptions={[5, 10, 25]}\n            component=\"div\"\n            count={rows.length}\n            rowsPerPage={rowsPerPage}\n            page={page}\n            onChangePage={handleChangePage}\n            onChangeRowsPerPage={handleChangeRowsPerPage}\n          />\n        </Paper>\n        <FormControlLabel\n          control={<Switch checked={dense} onChange={handleChangeDense} />}\n          label=\"Dense padding\"\n        />\n      </div>\n    );\n  }\n*/\n\t/*\n\treturn(\n\t\t<TableContainer component={Paper}>\n\t\t\t<Table className={classes.table} aria-label=\"simple table\">\n\t\t\t\t<TableHead>\n\t\t\t\t\t<TableRow>\n\t\t\t\t\t\t<TableCell>Name</TableCell>\n\t\t\t\t\t\t<TableCell>Address</TableCell>\n\t\t\t\t\t\t<TableCell>Phone Number</TableCell>\n\t\t\t\t\t\t<TableCell>Website</TableCell>\n\t\t\t\t\t\t<TableCell>Hours</TableCell>\n\t\t\t\t\t</TableRow>\n\t\t\t\t</TableHead>\n\t\t\t\t<TableBody>\n\t\t\t\t\t{rows.map((row) => (\n\t\t\t\t\t\t<TableRow key={row.name}>\n\t\t\t\t\t\t\t<Table Cell component=\"th\" scope=\"row\">\n\t\t\t\t\t\t\t\t{row.name}\n\t\t\t\t\t\t\t</Table>\n\t\t\t\t\t\t\t<TableCell>{row.address}</TableCell>\n\t\t\t\t\t\t\t<TableCell>{row.phone_number}</TableCell>\n\t\t\t\t\t\t\t<TableCell>{row.website}</TableCell>\n\t\t\t\t\t\t\t<TableCell>{row.hours}</TableCell>\n\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t))}\n\t\t\t\t</TableBody>\n\t\t\t</Table>\n\t\t</TableContainer>\n\t);\n  }\n  */\n /*\n  render() {\n    return (\n      <HashRouter>\n\t        <div>\n\t        <h1>COVID\tFIGHTER</h1>\n\t          <ul className=\"header\">\n\t            <li><NavLink exact to=\"/\">Home</NavLink></li>\n\t            <li><NavLink exact to=\"/Grocery\">Grocery</NavLink></li>\n\t            <li><NavLink exact to=\"/Restaurant\">Restaurant</NavLink></li>\n\t            <li><NavLink exact to=\"/Healthcare\">Healthcare</NavLink></li>\n\t            <li><NavLink exact to=\"/About\">About</NavLink></li>\n\t          </ul>\n\t          <div className=\"content\">\n\t\t\t\t  <Route exact path=\"/\" component={Home}/>\n\t\t\t\t  <Route path=\"/Grocery\" exact component={Grocery}/>\n\t\t\t\t  <Route path=\"/Restaurant\" exact component={Restaurant}/>\n\t\t\t\t  <Route path=\"/Healthcare\" exact component={Healthcare}/>\n\t\t\t\t  <Route path=\"/About\" exact component={About}/>\n\t\t\t\t</div>\n\t        </div>\n\t        \n      </HashRouter>\n\t\t/*\n      <div>\n        <h2>HELLO</h2>\n        <p>Cras facilisis urna ornare ex volutpat, et\n        convallis erat elementum. Ut aliquam, ipsum vitae\n        gravida suscipit, metus dui bibendum est, eget rhoncus nibh\n        metus nec massa. Maecenas hendrerit laoreet augue\n        nec molestie. Cum sociis natoque penatibus et magnis\n        dis parturient montes, nascetur ridiculus mus.</p>\n \n        <p>Duis a turpis sed lacus dapibus elementum sed eu lectus.</p>\n\t  </div>\n    );\n  }\n  */\n}\n/*\nclass GoogleMap extends Component {\n  googleMapRef = React.createRef()\n\n  componentDidMount() {\n    const googleMapScript = document.createElement('script')\n    googleScript.src = `https://maps.googleapis.com/maps/api/js?key=${GOOGLE_MAP_API_KEY}&libraries=places`\n    window.document.body.appendChild(googleScript)\n\n    googleScript.addEventListener('load', {\n      this.googleMap = this.createGoogleMap()\n      this.marker = this.createMarker()\n    })\n  }\n\n  createGoogleMap = () =>\n    new window.google.maps.Map(this.googleMapRef.current, {\n      zoom: 16,\n      center: {\n        lat: 43.642567,\n        lng: -79.387054,\n      },\n      disableDefaultUI: true,\n    })\n\n  createMarker = () =>\n    new window.google.maps.Marker({\n      position: { lat: 43.642567, lng: -79.387054 },\n      map: this.googleMap,\n    })\n\n  render() {\n    return (\n      <div\n        id=\"google-map\"\n        ref={this.googleMapRef}\n        style={{ width: '400px', height: '300px' }}\n      />\n    )\n  }\n}\n*/\nexport default Healthcare;\n//export default GoogleMap; "]},"metadata":{},"sourceType":"module"}