{"ast":null,"code":"var _jsxFileName = \"/Users/angelacao/Desktop/covid-fighter/react_ver/src/City.jsx\";\nimport React, { Component, useState, useEffect } from \"react\";\nimport { Map, GoogleApiWrapper } from \"google-maps-react\";\nimport { Route } from \"react-router-dom\";\nimport { HashRouter } from \"react-router-dom\";\nimport { NavLink } from \"react-router-dom\";\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport axios from \"axios\";\nimport citypic from \"./citypic.jpg\";\nimport { MDBDataTable } from 'mdbreact';\nimport \"./subpage.css\"; // function made from the Grocery class below\n\nfunction City(props) {\n  //variables for search parameters\n  const [searchName, setSearchName] = useState(\"\"); //variables, change all vars to const or let\n\n  const [data, setData] = useState();\n  const [id, setID] = useState(0);\n  const [name, setName] = useState(\"\");\n  const [state, setState] = useState(\"\");\n  const [latitude, setLatitude] = useState(0.0);\n  const [longitude, setLongitude] = useState(0.0);\n  const [popuation, setPopulation] = useState(0);\n  useEffect(() => {\n    axios.get(getURL()).then(result => {\n      //axios.get('/api/City/1').then((result) => {\n      console.log(result);\n      console.log(result.data); // setState({ data: result.data});\n\n      setData(result.data);\n      console.log(state.data);\n    });\n  }, []); //stores the input for searching by city name\n\n  const getNameInput = event => {\n    setSearchName(event.target.value);\n    console.log(searchName);\n  };\n\n  const onSort = (event, sortKey) => {\n    const data = state.data;\n    data.sort((a, b) => a[sortKey].localeCompare(b[sortKey]));\n    setState({\n      data\n    });\n  };\n\n  const getURL = () => {\n    //var replaceName = searchName.replace(' ', '+');\n    //var searchString = '/api/City/?name='.concat(replaceName);\n    var searchString = '/api/City/all/';\n    console.log(searchString);\n    return searchString;\n  };\n\n  const testData = {\n    columns: [{\n      label: 'Name',\n      field: 'name',\n      sort: 'asc',\n      width: 150\n    }, {\n      label: 'State',\n      field: 'state',\n      sort: 'asc',\n      width: 270\n    }, {\n      label: 'Latitude',\n      field: 'latitude',\n      sort: 'asc',\n      width: 200\n    }, {\n      label: 'Longitude',\n      field: 'longitude',\n      sort: 'asc',\n      width: 100\n    }, {\n      label: 'Population',\n      field: 'population',\n      sort: 'asc',\n      width: 150\n    }],\n    rows: data\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: citypic,\n    className: \"subpage_img\",\n    alt: \"city\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 3\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 3\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 3\n    }\n  }), /*#__PURE__*/React.createElement(MDBDataTable, {\n    striped: true,\n    bordered: true,\n    small: true,\n    data: testData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 3\n    }\n  }));\n}\n\n;\nexport default City;","map":{"version":3,"sources":["/Users/angelacao/Desktop/covid-fighter/react_ver/src/City.jsx"],"names":["React","Component","useState","useEffect","Map","GoogleApiWrapper","Route","HashRouter","NavLink","PropTypes","clsx","axios","citypic","MDBDataTable","City","props","searchName","setSearchName","data","setData","id","setID","name","setName","state","setState","latitude","setLatitude","longitude","setLongitude","popuation","setPopulation","get","getURL","then","result","console","log","getNameInput","event","target","value","onSort","sortKey","sort","a","b","localeCompare","searchString","testData","columns","label","field","width","rows"],"mappings":"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","sourcesContent":["import React, { Component, useState, useEffect } from \"react\";\nimport { Map, GoogleApiWrapper } from \"google-maps-react\";\nimport { Route } from \"react-router-dom\";\nimport { HashRouter } from \"react-router-dom\";\nimport { NavLink } from \"react-router-dom\";\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport axios from \"axios\";\nimport citypic from \"./citypic.jpg\"\nimport { MDBDataTable } from 'mdbreact';\nimport \"./subpage.css\";\n\n\n// function made from the Grocery class below\nfunction City(props){\n\n  //variables for search parameters\n  const [searchName, setSearchName] = useState(\"\");\n\n  //variables, change all vars to const or let\n  const [data, setData] = useState();\n  const [id, setID] = useState(0);\n  const [name, setName] = useState(\"\");\n  const [state, setState] = useState(\"\");\n  const [latitude, setLatitude] = useState(0.0);\n  const [longitude, setLongitude] = useState(0.0);\n  const [popuation, setPopulation] = useState(0); \n\n  useEffect(()=> {\n      axios.get(getURL()).then((result) => {\n    //axios.get('/api/City/1').then((result) => {\n\n      console.log(result)\n      console.log(result.data);\n\n      // setState({ data: result.data});\n      setData(result.data);\n      console.log(state.data);\n    });\n\n  }, []  )\n\n  //stores the input for searching by city name\n  const getNameInput = event => {\n    setSearchName(event.target.value);\n    console.log(searchName);\n};\n\n\n\nconst onSort = (event, sortKey) => {\n  const data = state.data;\n  data.sort((a, b) => a[sortKey].localeCompare(b[sortKey]))\n  setState({data})\n}\n\nconst getURL = () => {\n  //var replaceName = searchName.replace(' ', '+');\n  //var searchString = '/api/City/?name='.concat(replaceName);\n  var searchString  = '/api/City/all/';\n  console.log(searchString);\n  return searchString;\n}\n\n\n\nconst testData = {\n  columns: [\n    {\n      label: 'Name',\n      field: 'name',\n      sort: 'asc',\n      width: 150\n    },\n    {\n      label: 'State',\n      field: 'state',\n      sort: 'asc',\n      width: 270\n    },\n    {\n      label: 'Latitude',\n      field: 'latitude',\n      sort: 'asc',\n      width: 200\n    },\n    {\n      label: 'Longitude',\n      field: 'longitude',\n      sort: 'asc',\n      width: 100\n    },\n    {\n      label: 'Population',\n      field: 'population',\n      sort: 'asc',\n      width: 150\n    }\n  ],\n  rows: data\n};\n\nreturn (\n  <div>\n  <img src={citypic} className={\"subpage_img\"} alt=\"city\"/>\n  <br></br>\n  <br></br>\n  <MDBDataTable\n    striped\n    bordered\n    small\n    data={testData}\n  />\n  </div>\n  \n\n);\n};\n\n\nexport default City;\n\n"]},"metadata":{},"sourceType":"module"}